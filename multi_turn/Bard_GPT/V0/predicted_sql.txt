SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' AND Is_male = 0;
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT Song_Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT singer.Country, COUNT(*) AS num_singers FROM singer GROUP BY singer.Country;
SELECT Country, COUNT(*) AS num_singers FROM singer GROUP BY Country
SELECT Song_Name  FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name  FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity  FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year > 2013  GROUP BY stadium.Stadium_ID  ORDER BY COUNT(concert.concert_ID) DESC  LIMIT 1;
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT s1.Country FROM singer s1, singer s2 WHERE s1.Age > 40 AND s2.Age < 30 AND s1.Country = s2.Country
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert_Name, Theme, COUNT(Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND stadium.Stadium_ID IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2015 )
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015)
SELECT COUNT(*) FROM concert  WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium                       WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT COUNT(*) FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20
SELECT COUNT(*)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'
SELECT COUNT(*)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
SELECT DISTINCT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
SELECT Student.Fname  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Student.StuID IN  (SELECT Has_Pet.StuID FROM Has_Pet  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog')
SELECT DISTINCT Student.Fname  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Student.StuID IN  (SELECT Has_Pet.StuID FROM Has_Pet  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog')
SELECT Student.Major, Student.Age  FROM Student  WHERE Student.StuID NOT IN  (SELECT Has_Pet.StuID FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat')
SELECT Student.Major, Student.Age  FROM Student  WHERE Student.StuID NOT IN      (SELECT Has_Pet.StuID       FROM Has_Pet       JOIN Pets ON Has_Pet.PetID = Pets.PetID       WHERE Pets.PetType = 'cat')
SELECT DISTINCT Has_Pet.StuID  FROM Has_Pet  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL
SELECT DISTINCT Student.StuID  FROM Student  LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Fname FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN  (SELECT Student.StuID FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat')
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets) LIMIT 1;
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT Pets.PetType, AVG(Pets.pet_age) AS avg_age, MAX(Pets.pet_age) AS max_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY Pets.PetType
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;
SELECT Pets.PetType, AVG(Pets.weight)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  GROUP BY Pets.PetType
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 0;
SELECT DISTINCT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT Pets.PetID  FROM Pets  INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  INNER JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.LName = 'Smith'
SELECT Pets.PetID  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.LName = 'Smith'
SELECT Has_Pet.StuID, COUNT(*) AS num_pets FROM Has_Pet GROUP BY Has_Pet.StuID HAVING COUNT(*) > 0
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Has_Pet GROUP BY Has_Pet.StuID
SELECT Student.Fname, Student.Sex  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
SELECT Student.Fname, Student.Sex  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT AVG(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT AVG(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY continents.ContId, continents.Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT car_makers.FullName, car_makers.Id, COUNT(DISTINCT car_names.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT car_names.Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT DISTINCT car_makers.FullName  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.Make  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.Make JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_makers.Maker, cars_data.Year  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.Make  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, MIN(cars_data.Year)  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.Make  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_makers.Maker  ORDER BY MIN(cars_data.Year)  LIMIT 1;
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS num_car_makers FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Id) DESC  LIMIT 1;
SELECT car_makers.FullName, COUNT(DISTINCT car_names.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(DISTINCT car_names.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)'
SELECT Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)'
SELECT COUNT(*) FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'france'
SELECT COUNT(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'
SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'usa'
SELECT COUNT(*) FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data  WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data  WHERE Cylinders = 8 AND Year = 1974;
SELECT Maker, Model FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Maker, car_names.Model;
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers) ORDER BY CountryName, CountryId;
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) AS avg_weight FROM cars_data GROUP BY Year;
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year;
SELECT countries.CountryName  FROM countries  JOIN continents ON countries.Continent = continents.ContId  JOIN car_makers ON car_makers.Country = countries.CountryId  WHERE continents.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT MAX(cars_data.Horsepower), car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3;
SELECT car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Cylinders = 3  ORDER BY cars_data.Horsepower DESC  LIMIT 1;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'Volvo'
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT car_names.Model, COUNT(DISTINCT car_names.Make) AS NumVersions FROM car_names GROUP BY car_names.Model ORDER BY NumVersions DESC LIMIT 1;
SELECT Model, COUNT(DISTINCT Make) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'American Motor Company'
SELECT car_makers.Id, car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3;
SELECT Id, Maker FROM car_makers  WHERE Id IN (SELECT Maker FROM model_list               GROUP BY Maker               HAVING COUNT(*) > 3)
SELECT DISTINCT car_names.Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model  FROM car_names  JOIN car_makers ON car_names.Make = car_makers.FullName  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000  INTERSECT  SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;
SELECT cars_data.Horsepower  FROM cars_data  WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT MIN(Cylinders) FROM cars_data  WHERE Id = (SELECT MakeId FROM car_names              WHERE Model = 'volvo' AND Maker = (SELECT Id FROM car_makers WHERE FullName = 'volvo'))  ORDER BY Accelerate ASC LIMIT 1;
SELECT MIN(Cylinders) FROM cars_data  WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')  AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data                   WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'))
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(DISTINCT countries.CountryId)  FROM countries  INNER JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId  HAVING COUNT(car_makers.Id) > 2
SELECT COUNT(DISTINCT countries.CountryId)  FROM countries  INNER JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId  HAVING COUNT(car_makers.Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT Model, MAX(Horsepower) FROM cars_data  INNER JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE Cylinders = 4  GROUP BY Model  ORDER BY MAX(Horsepower) DESC  LIMIT 1;
SELECT car_names.Model, MAX(cars_data.Horsepower)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Cylinders = 4  GROUP BY car_names.Model  ORDER BY MAX(cars_data.Horsepower) DESC  LIMIT 1;
SELECT car_names.MakeId, car_makers.Maker  FROM car_names  JOIN cars_data ON car_names.Id = cars_data.MakeId  JOIN car_makers ON car_makers.Id = car_names.Model  WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker  FROM car_names  JOIN car_makers ON car_names.Make = car_makers.Id  JOIN cars_data ON car_names.Id = cars_data.MakeId  WHERE cars_data.Cylinders < 4  AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(MPG) FROM cars_data  WHERE Cylinders = 8 AND Year < 1980;
SELECT MAX(MPG) FROM cars_data  WHERE (Cylinders = 8 OR Year < 1980)
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Weight < 3500 AND Maker != 'Ford Motor Company'
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3;
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  INNER JOIN model_list ON car_makers.Id = model_list.Maker  INNER JOIN car_names ON model_list.Model = car_names.Model  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(car_names.Make) > 3;
SELECT countries.Id, countries.CountryName  FROM countries  INNER JOIN car_makers ON countries.CountryId = car_makers.Country  INNER JOIN model_list ON car_makers.Id = model_list.Maker  INNER JOIN car_names ON model_list.Model = car_names.Model  WHERE car_names.Model = 'fiat'  GROUP BY countries.Id, countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) > 3;
SELECT CountryId, CountryName FROM countries  WHERE CountryId IN  (SELECT Country FROM car_makers  GROUP BY Country  HAVING COUNT(DISTINCT Id) > 3)  OR CountryId IN  (SELECT CountryId FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  WHERE car_names.Make = 'fiat')
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT airlines.Country  FROM airlines  WHERE airlines.Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT * FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights  JOIN airports AS source ON flights.SourceAirport = source.AirportCode  JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights  WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Abbreviation = 'UA' AND airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ABZ';
SELECT airports.City, COUNT(*) AS num_arrivals FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY num_arrivals DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS freq_dest FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY freq_dest DESC LIMIT 1;
SELECT airports.City, COUNT(*) as num_flights FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY num_flights DESC LIMIT 1;
SELECT airports.City  FROM airports  JOIN flights ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1;
SELECT airports.AirportCode  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  GROUP BY airports.AirportCode  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT AirportCode FROM airports  WHERE AirportCode NOT IN  (SELECT SourceAirport FROM flights  UNION  SELECT DestAirport FROM flights)  ORDER BY AirportCode LIMIT 1;
SELECT airports.AirportCode  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  GROUP BY airports.AirportCode  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*) ASC               LIMIT 1)
SELECT airlines.Abbreviation, airlines.Country  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Abbreviation, airlines.Country  HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY Airline) as t)  LIMIT 1;
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'AHD'
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  INNER JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'APG'  AND flights.DestAirport = 'CVO'  INTERSECT  SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'CVO'  AND flights.DestAirport = 'APG'
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.Abbreviation = flights.Airline  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode IN ('APG', 'CVO')  GROUP BY airlines.Airline  HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN (SELECT airlines.Airline                               FROM airlines                               INNER JOIN flights ON airlines.uid = flights.Airline                               WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'CVO'  AND airlines.Airline NOT IN  (SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'APG')
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT FlightNo FROM flights  WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights  WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
SELECT AirportName FROM airports  WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
SELECT AirportName FROM airports  WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(Employee_ID) AS num_employees FROM employee GROUP BY City;
SELECT City, COUNT(Employee_ID) AS num_employees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT location, COUNT(DISTINCT shop_id) AS num_shops FROM shop GROUP BY location;
SELECT location, COUNT(DISTINCT shop_id) AS num_shops FROM shop GROUP BY location;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Year_awarded) DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Year_awarded) DESC LIMIT 1;
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name  ORDER BY COUNT(hiring.Employee_ID) DESC  LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name  FROM shop  LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name  FROM shop  LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  WHERE hiring.Employee_ID IS NULL
SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees_hired FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring;
SELECT * FROM hiring
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 AND s.District IN (     SELECT s2.District     FROM shop s2     WHERE s2.Number_products > 10000 )
SELECT DISTINCT s1.District FROM shop s1, shop s2 WHERE s1.Number_products < 3000 AND s2.Number_products > 10000 AND s1.District = s2.District
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV'
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS num_documents FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID
SELECT Documents.Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Documents.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates  WHERE Template_Type_Code = 'CV'
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(Template_ID) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS num_templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code, COUNT(Template_ID) AS num_templates FROM Templates GROUP BY Template_Type_Code ORDER BY num_templates DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(Template_ID) < 3 )
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code IN (     SELECT Template_Type_Code      FROM Templates      GROUP BY Template_Type_Code      HAVING COUNT(Template_ID) < 3 )
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT Templates.Template_Type_Code, MIN(Templates.Version_Number) AS Lowest_Version_Number FROM Templates GROUP BY Templates.Template_Type_Code;
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Data base'
SELECT Templates.Template_Type_Code  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Document_Name = 'Data base'
SELECT Document_Name FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Document_Name FROM Documents  WHERE Template_ID IN  (SELECT Template_ID FROM Templates  WHERE Template_Type_Code = 'BK')
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS num_documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS num_documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS num_docs FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY num_docs DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN      (SELECT DISTINCT Template_Type_Code       FROM Templates       INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN      (SELECT DISTINCT Template_Type_Code       FROM Templates       INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IN (SELECT Document_ID FROM Paragraphs)
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'
SELECT COUNT(*) FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_Text FROM Paragraphs  INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs  INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) >= 2 )
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
SELECT Document_ID, Document_Name  FROM Documents  WHERE Document_ID = (SELECT Document_ID                       FROM Paragraphs                       GROUP BY Document_ID                       ORDER BY COUNT(*) DESC                       LIMIT 1);
SELECT Document_ID, Document_Name  FROM Documents  WHERE Document_ID = (SELECT Document_ID                       FROM Paragraphs                       GROUP BY Document_ID                       ORDER BY COUNT(*) DESC                       LIMIT 1);
SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) = (     SELECT MIN(paragraph_count)     FROM (       SELECT COUNT(*) AS paragraph_count       FROM Paragraphs       GROUP BY Document_ID     ) AS counts   ) );
SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) BETWEEN 1 AND 2 )
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN (     SELECT Paragraphs.Document_ID     FROM Paragraphs     GROUP BY Paragraphs.Document_ID     HAVING COUNT(*) BETWEEN 1 AND 2 )
SELECT Documents.Document_ID  FROM Documents  INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT DISTINCT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT COUNT(*) FROM teacher
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age IN (32,33)
SELECT Name FROM teacher WHERE Age IN (32,33)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID) AS Num_Teachers FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID) AS num_teachers FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
SELECT Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1;
SELECT DISTINCT t1.Hometown  FROM teacher t1  INNER JOIN teacher t2 ON t1.Hometown = t2.Hometown AND t1.Teacher_ID <> t2.Teacher_ID
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name  FROM course_arrange  JOIN course ON course_arrange.Course_ID = course.Course_ID  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  WHERE course.Course = 'math'
SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT teacher.Name  FROM teacher  LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  WHERE course_arrange.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(visitor.Age) FROM visitor  INNER JOIN visit ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership <= 4;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff)  FROM museum  WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name FROM museum  WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY SUM(visit.Num_of_Ticket) DESC LIMIT 1;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) FROM visit  INNER JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1;
SELECT visitor.Name  FROM visitor  INNER JOIN visit ON visitor.ID = visit.visitor_ID  INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID  WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011  GROUP BY visitor.Name  HAVING COUNT(DISTINCT visit.Museum_ID) = 2;
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID NOT IN (   SELECT Museum_ID   FROM museum   WHERE Open_Year > 2010 )
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON m.winner_id = p.player_id WHERE m.tourney_date BETWEEN '2013-01-01' AND '2013-12-31' AND p.player_id IN (   SELECT p2.player_id   FROM players p2   JOIN matches m2 ON m2.winner_id = p2.player_id   WHERE m2.tourney_date BETWEEN '2016-01-01' AND '2016-12-31' )
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON m.winner_id = p.player_id WHERE m.year = 2013 AND m.winner_id IN (   SELECT winner_id   FROM matches   WHERE year = 2016 )
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name FROM players INNER JOIN matches ON matches.winner_id = players.player_id INNER JOIN tournaments ON tournaments.tourney_id = matches.tourney_id WHERE tournaments.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id HAVING COUNT(DISTINCT tournaments.tourney_name) = 2;
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON matches.winner_id = players.player_id INNER JOIN tournaments ON tournaments.tourney_id = matches.tourney_id WHERE tournaments.tourney_name = 'WTA Championships' AND tournaments.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT tournaments.tourney_name) = 2;
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, last_name FROM players ORDER BY birth_date ASC
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT winner_name, winner_rank_points  FROM matches  JOIN players ON matches.winner_id = players.player_id  GROUP BY winner_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open')
SELECT players.first_name, players.last_name  FROM players  JOIN matches ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  WHERE matches.tourney_name = 'Australian Open'  ORDER BY rankings.ranking_points DESC  LIMIT 1;
SELECT loser_name, winner_name  FROM matches  JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id  WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;
SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY winner_age ASC  LIMIT 3
SELECT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE winner_age IN (SELECT DISTINCT winner_age FROM matches ORDER BY winner_age LIMIT 3)  ORDER BY winner_age ASC, winner_rank ASC LIMIT 3
SELECT COUNT(DISTINCT matches.winner_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(DISTINCT matches.winner_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE winner_hand = 'L' AND tourney_level = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN (     SELECT winner_id, MAX(winner_rank_points) AS max_points     FROM matches     GROUP BY winner_id ) AS max_points_table ON matches.winner_id = max_points_table.winner_id AND matches.winner_rank_points = max_points_table.max_points ORDER BY max_points_table.max_points DESC LIMIT 1;
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT ship.name, ship.tonnage  FROM ship  JOIN battle ON ship.lost_in_battle = battle.id  ORDER BY ship.name DESC
SELECT name, date, result FROM battle;
SELECT MAX(killed + injured) AS max_death_toll, MIN(killed + injured) AS min_death_toll FROM death GROUP BY caused_by_ship_id
SELECT AVG(injured) FROM death
SELECT death.killed, death.injured, death.note FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT DISTINCT battle.id, battle.name  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id WHERE death.killed > 10 GROUP BY battle.id, battle.name
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT battle.name  FROM battle  WHERE battle.bulgarian_commander = 'Kaloyan'  AND battle.latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(DISTINCT battle.id)  FROM battle  LEFT JOIN ship ON ship.lost_in_battle = battle.id AND ship.tonnage = '225'  WHERE ship.id IS NULL
SELECT battle.name, battle.date  FROM battle  INNER JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name IN ('Lettice', 'HMS Atalanta')  GROUP BY battle.id, battle.name, battle.date  HAVING COUNT(DISTINCT ship.id) = 2;
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  LEFT JOIN ship ON ship.lost_in_battle = battle.id  WHERE battle.location = 'English Channel' AND ship.id IS NULL;
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;
SELECT department_id, department_name  FROM Departments  WHERE department_id = (     SELECT department_id      FROM Degree_Programs      GROUP BY department_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT COUNT(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering'
SELECT COUNT(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering'
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT course_id, course_name FROM Courses  WHERE course_id IN  (SELECT course_id FROM Sections  GROUP BY course_id  HAVING COUNT(*) <= 2)
SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (   SELECT course_id FROM Sections   GROUP BY course_id   HAVING COUNT(*) >= 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (     SELECT semester_id     FROM Student_Enrolment     GROUP BY semester_id     ORDER BY COUNT(student_id) DESC     LIMIT 1 )
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.degree_program_id IN (     SELECT degree_program_id     FROM Student_Enrolment     WHERE semester_id = [semester_id]     GROUP BY degree_program_id     HAVING COUNT(*) = 2 ) AND Student_Enrolment.semester_id = [semester_id]
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1;
SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name  FROM Degree_Programs  WHERE degree_program_id = (     SELECT degree_program_id      FROM Student_Enrolment      GROUP BY degree_program_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 )
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT DISTINCT Courses.course_name  FROM Courses  INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
SELECT course_name FROM Courses  INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  INNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
SELECT course_name  FROM Courses  WHERE course_id = (     SELECT course_id      FROM Student_Enrolment_Courses      GROUP BY course_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT Courses.course_name  FROM Courses  INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC  LIMIT 1;
SELECT last_name  FROM Students  WHERE current_address_id IN      (SELECT address_id       FROM Addresses       WHERE state_province_county = 'North Carolina')  AND student_id NOT IN      (SELECT student_id       FROM Student_Enrolment)
SELECT last_name  FROM Students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM Transcript_Contents     GROUP BY transcript_id     HAVING COUNT(DISTINCT course_id) >= 2 )
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM Transcript_Contents     GROUP BY transcript_id     HAVING COUNT(DISTINCT course_id) >= 2 )
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT Students.cell_mobile_number  FROM Students  WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
SELECT Students.first_name FROM Students WHERE Students.permanent_address_id <> Students.current_address_id;
SELECT Students.first_name  FROM Students  JOIN Addresses AS perm ON Students.permanent_address_id = perm.address_id  JOIN Addresses AS curr ON Students.current_address_id = curr.address_id  WHERE perm.line_1 <> curr.line_1 OR perm.line_2 <> curr.line_2 OR perm.line_3 <> curr.line_3 OR perm.city <> curr.city OR perm.zip_postcode <> curr.zip_postcode OR perm.state_province_county <> curr.state_province_county OR perm.country <> curr.country  GROUP BY Students.student_id  HAVING COUNT(*) = 1;
SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (     SELECT current_address_id     FROM Students     GROUP BY current_address_id     HAVING COUNT(*) = (         SELECT MAX(count)         FROM (             SELECT COUNT(*) AS count             FROM Students             GROUP BY current_address_id         ) AS counts     ) )
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses INNER JOIN Students ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(DISTINCT Students.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT MAX(transcript_date) FROM Transcripts
SELECT student_course_id, COUNT(transcript_id) AS enrollment_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT student_course_id, COUNT(*) AS course_count FROM Transcript_Contents GROUP BY student_course_id HAVING course_count = (SELECT MAX(course_count) FROM (SELECT student_course_id, COUNT(*) AS course_count FROM Transcript_Contents GROUP BY student_course_id) AS course_counts)
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) AS count       FROM Transcript_Contents       GROUP BY transcript_id     ) AS counts   ) )
SELECT transcript_id, transcript_date  FROM Transcripts  WHERE transcript_id IN      (SELECT transcript_id       FROM Transcript_Contents       GROUP BY transcript_id       ORDER BY COUNT(*) ASC       LIMIT 1)
SELECT DISTINCT Semesters.semester_name  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor')  GROUP BY Semesters.semester_name  HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2
SELECT se.semester_id FROM Student_Enrolment se INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT se.student_id) > 1;
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students)
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC
SELECT * FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'
SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY num_channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT TV_Channel.Content  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT TV_Channel.Package_Option  FROM TV_Channel  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY num_channels ASC LIMIT 1;
SELECT TV_Channel.Language, COUNT(*) AS num_channels FROM TV_Channel LEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Language IS NOT NULL GROUP BY TV_Channel.Language HAVING COUNT(*) = (SELECT MIN(lang_count) FROM (SELECT COUNT(*) AS lang_count FROM TV_Channel WHERE Language IS NOT NULL GROUP BY Language) AS lang_counts) ORDER BY num_channels ASC;
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name  FROM TV_Channel  INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT Cartoon.Title  FROM Cartoon  INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Title FROM Cartoon  WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT * FROM TV_series ORDER BY Rating DESC
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Title = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Title = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.series_name  FROM TV_series  WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.Episode  FROM TV_series  INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio'
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel  FROM Cartoon  WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  WHERE TV_Channel.Hight_definition_TV = 'Yes'
SELECT TV_Channel.Package_Option, TV_series.series_name  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.Hight_definition_TV = 'Yes'
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id AND Cartoon.Written_by = 'Todd Casey'  WHERE Cartoon.id IS NULL
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel  INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by <> 'Todd Casey'
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.Language <> 'English'
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language <> 'English'
SELECT TV_Channel.id  FROM TV_Channel  WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)
SELECT id FROM TV_Channel WHERE (SELECT COUNT(*) FROM TV_series WHERE TV_series.Channel = TV_Channel.id) + (SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id) > 2;
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN  (SELECT Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN  (SELECT Cartoon.Channel  FROM Cartoon  WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option  FROM TV_Channel  WHERE TV_Channel.id NOT IN      (SELECT Cartoon.Channel       FROM Cartoon       WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option  FROM TV_Channel  WHERE TV_Channel.id NOT IN  (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(poker_player.Final_Table_Made)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings < 200000
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE Earnings > 300000;
SELECT Name FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE Earnings > 300000;
SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Final_Table_Made ASC;
SELECT Birth_Date FROM people  WHERE People_ID = (SELECT People_ID FROM poker_player                     WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player))
SELECT Birth_Date FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Earnings ASC LIMIT 1;
SELECT poker_player.Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT Poker_Player.Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT AVG(poker_player.Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200;
SELECT AVG(poker_player.Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200;
SELECT Name FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY Earnings DESC
SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC
SELECT Nationality, COUNT(*) as num_people FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) as count  FROM people  GROUP BY Nationality  ORDER BY count DESC  LIMIT 1;
SELECT Nationality  FROM people  GROUP BY Nationality  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT state) FROM voter_1.AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES;
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN      (SELECT contestant_number       FROM VOTES       GROUP BY contestant_number       HAVING COUNT(*) >= 2)
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS LEFT JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE VOTES.contestant_number IS NULL
SELECT AREA_CODE_STATE.area_code  FROM AREA_CODE_STATE  JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state  GROUP BY AREA_CODE_STATE.area_code  ORDER BY COUNT(VOTES.vote_id) DESC  LIMIT 1;
SELECT created, state, phone_number  FROM VOTES  WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')
SELECT DISTINCT a.area_code  FROM voter_1.AREA_CODE_STATE a  JOIN voter_1.VOTES v1 ON a.state = v1.state  JOIN voter_1.VOTES v2 ON v1.phone_number = v2.phone_number AND v1.state = v2.state  JOIN voter_1.CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number AND c1.contestant_name = 'Tabatha Gehling'  JOIN voter_1.CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number AND c2.contestant_name = 'Kelly Clauss'  WHERE a.area_code IS NOT NULL;
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT country.Continent FROM country WHERE country.Name = 'Anguilla'
SELECT country.Continent FROM country  JOIN city ON city.CountryCode = country.Code  WHERE city.Name = 'Anguilla';
SELECT country.Region FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul';
SELECT country.Region FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul';
SELECT Language  FROM countrylanguage  WHERE CountryCode = 'ABW'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT country.Region, country.Population  FROM country  WHERE country.Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
SELECT country.Name  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.LifeExpectancy ASC  LIMIT 1;
SELECT country.Name  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.LifeExpectancy ASC  LIMIT 1;
SELECT SUM(country.Population), MAX(country.GNP)  FROM country  WHERE country.Continent = 'Asia'
SELECT SUM(city.Population), MAX(country.GNP)  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE country.Continent = 'Asia'
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm LIKE '%US territory%'
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE Continent = 'North America' AND Region = 'Caribbean'
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT country.Name  FROM country  JOIN (SELECT CountryCode, COUNT(*) AS numLanguages        FROM countrylanguage        WHERE IsOfficial = 'T'        GROUP BY CountryCode        ORDER BY numLanguages DESC        LIMIT 1) AS langCount  ON country.Code = langCount.CountryCode
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Code  ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC  LIMIT 1;
SELECT country.Continent  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Continent  ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC  LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY num_languages DESC LIMIT 1;
SELECT COUNT(DISTINCT cl.CountryCode)  FROM countrylanguage cl  WHERE cl.Language IN ('English', 'Dutch')  GROUP BY cl.CountryCode  HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT COUNT(DISTINCT countrylanguage.CountryCode)  FROM countrylanguage  WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'
SELECT DISTINCT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'French')  GROUP BY country.Name  HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT DISTINCT c.Name  FROM country c  JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'  JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT DISTINCT country.Name  FROM country  INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'  AND EXISTS (SELECT * FROM countrylanguage              WHERE countrylanguage.CountryCode = country.Code              AND countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T')
SELECT country.Name  FROM country  INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T'  GROUP BY country.Name  HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT COUNT(DISTINCT country.Continent)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT country.Continent) FROM country  INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT DISTINCT country.Region  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT DISTINCT country.Region  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT DISTINCT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1;
SELECT DISTINCT cl.Language  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.GovernmentForm LIKE '%Republic%'  AND cl.IsOfficial = 'T'  AND cl.Language NOT IN (     SELECT cl2.Language      FROM country c2      JOIN countrylanguage cl2 ON c2.Code = cl2.CountryCode      WHERE c2.GovernmentForm LIKE '%Republic%'      GROUP BY cl2.Language      HAVING COUNT(DISTINCT c2.Code) > 1 )  GROUP BY cl.Language  HAVING COUNT(DISTINCT c.Code) = 1;
SELECT DISTINCT cl.Language  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.GovernmentForm = 'Republic'  AND cl.Language NOT IN (     SELECT cl2.Language      FROM country c2      JOIN countrylanguage cl2 ON c2.Code = cl2.CountryCode      WHERE c2.GovernmentForm = 'Republic'      GROUP BY cl2.Language      HAVING COUNT(DISTINCT c2.Code) > 1 )  AND cl.IsOfficial = 'T'
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1;
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1;
SELECT AVG(LifeExpectancy)  FROM country  WHERE Code NOT IN      (SELECT CountryCode       FROM countrylanguage       WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(Population)  FROM country  WHERE Code NOT IN      (SELECT CountryCode       FROM countrylanguage       WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(city.Population)  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language != 'English'
SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT Language)  FROM countrylanguage  INNER JOIN country ON countrylanguage.CountryCode = country.Code  WHERE IsOfficial = 'T' AND IndepYear < 1930
SELECT COUNT(DISTINCT Language) FROM countrylanguage  WHERE IsOfficial = 'T' AND CountryCode IN  (SELECT Code FROM country WHERE IndepYear < 1930)
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT c.Name  FROM country c  WHERE c.Continent = 'Africa'  AND c.Population < (SELECT MIN(c2.Population)                      FROM country c2                      WHERE c2.Continent = 'Asia')
SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Africa'  AND c1.Population < (SELECT MIN(c2.Population)                       FROM country c2                       WHERE c2.Continent = 'Asia')
SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Asia'  AND c1.Population > (SELECT MAX(c2.Population)                       FROM country c2                       WHERE c2.Continent = 'Africa')
SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Asia'  AND c1.Population > (SELECT MAX(c2.Population)                       FROM country c2                       WHERE c2.Continent = 'Africa')
SELECT DISTINCT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT DISTINCT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'
SELECT DISTINCT country.Code  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English'  AND country.GovernmentForm <> 'Republic'
SELECT DISTINCT country.Code  FROM country  LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English'  AND country.GovernmentForm <> 'Republic'  AND countrylanguage.IsOfficial = 'T'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F';
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea  FROM country  WHERE Population = (SELECT MIN(Population) FROM country)
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, country.Population, country.HeadOfState  FROM country  WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2;
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District;
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District
SELECT country.GovernmentForm, SUM(country.Population) AS total_population FROM country WHERE country.LifeExpectancy > 72 GROUP BY country.GovernmentForm
SELECT governmentform, SUM(population) AS total_population FROM country WHERE governmentform IN (   SELECT governmentform   FROM country   WHERE lifeexpectancy > 72   GROUP BY governmentform ) GROUP BY governmentform
SELECT country.Continent, AVG(country.LifeExpectancy), SUM(country.Population) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent;
SELECT country.Continent, SUM(country.Population) AS total_population, AVG(country.LifeExpectancy) AS avg_life_expectancy FROM country WHERE country.Continent IN (     SELECT country.Continent     FROM country     GROUP BY country.Continent     HAVING AVG(country.LifeExpectancy) < 72 ) GROUP BY country.Continent;
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(country.Population), AVG(country.SurfaceArea)  FROM country  WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(country.Population), AVG(country.SurfaceArea)  FROM country  WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1;
SELECT cl.CountryCode, cl.Language FROM countrylanguage cl INNER JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) cl2 ON cl.CountryCode = cl2.CountryCode AND cl.Percentage = cl2.MaxPercentage ORDER BY cl.CountryCode ASC;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = country.Code ) ORDER BY country.Code ASC;
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (     SELECT MAX(cl2.Percentage)     FROM countrylanguage cl2     WHERE cl2.Language = 'Spanish' )
SELECT COUNT(*)  FROM countrylanguage  WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Spanish' ORDER BY countrylanguage.Percentage DESC LIMIT 1;
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage > 50;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor  WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  ORDER BY COUNT(orchestra.Orchestra_ID) DESC  LIMIT 1;
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Conductor_ID  ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC  LIMIT 1;
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor  WHERE Conductor_ID IN  (SELECT Conductor_ID FROM orchestra  WHERE Year_of_Founded > 2008)
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(num_orchestras)     FROM (         SELECT COUNT(DISTINCT Orchestra_ID) AS num_orchestras         FROM orchestra         GROUP BY Record_Company     ) AS orchestras )
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company ORDER BY num_orchestras DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT DISTINCT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 2003 INTERSECT SELECT DISTINCT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded > 2003;
SELECT DISTINCT o1.Record_Company  FROM orchestra o1  JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company  WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN  (SELECT Orchestra_ID FROM performance  GROUP BY Orchestra_ID  HAVING COUNT(*) > 1)
SELECT Orchestra.Year_of_Founded FROM Orchestra INNER JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID GROUP BY Orchestra.Orchestra_ID HAVING COUNT(Performance.Performance_ID) > 1;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9,10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9,10);
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC, Highschooler.name ASC;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC, Highschooler.name ASC;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN      (SELECT Friend.student_id       FROM Friend       UNION       SELECT Friend.friend_id       FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT DISTINCT Highschooler.ID FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.student_id = Highschooler.ID AND Likes.liked_id = Friend.friend_id
SELECT DISTINCT f.student_id  FROM Friend f  JOIN Likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.liked_id = Highschooler.ID WHERE Highschooler.ID IN (SELECT DISTINCT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT DISTINCT Likes.student_id)
SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.student_id = Highschooler.ID AND Likes.liked_id = Friend.friend_id
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id)  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2;
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Friend.student_id = Highschooler.ID WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 2;
SELECT Highschooler.name  FROM Highschooler  INNER JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Highschooler.grade > 5  GROUP BY Highschooler.ID  HAVING COUNT(Friend.friend_id) >= 2;
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(H.grade)  FROM Highschooler H  WHERE H.ID IN (SELECT F.student_id FROM Friend F)
SELECT AVG(Highschooler.grade)  FROM Highschooler  WHERE Highschooler.ID IN      (SELECT Friend.student_id       FROM Friend       UNION       SELECT Friend.friend_id       FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT Owners.state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state
SELECT DISTINCT Owners.state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state
SELECT AVG(Dogs.age) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT AVG(DATEDIFF(CURDATE(), Dogs.date_of_birth)) AS avg_age FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM Treatments  GROUP BY professional_id  HAVING COUNT(*) > 2)
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN  (SELECT professional_id FROM Treatments  GROUP BY professional_id  HAVING COUNT(*) > 2)
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment <= 1000 GROUP BY Dogs.name
SELECT Dogs.name  FROM Dogs  JOIN Owners ON Dogs.owner_id = Owners.owner_id  JOIN Treatments ON Treatments.dog_id = Dogs.dog_id  WHERE Owners.owner_id IN (     SELECT Owners.owner_id      FROM Owners      JOIN Dogs ON Dogs.owner_id = Owners.owner_id      JOIN Treatments ON Treatments.dog_id = Dogs.dog_id      GROUP BY Owners.owner_id      HAVING SUM(Treatments.cost_of_treatment) <= 1000 )
SELECT DISTINCT first_name  FROM (     SELECT first_name FROM Owners      UNION      SELECT first_name FROM Professionals ) AS names  WHERE names.first_name NOT IN (     SELECT name FROM Dogs )
SELECT DISTINCT first_name  FROM (     SELECT first_name FROM Owners      UNION      SELECT first_name FROM Professionals ) AS names  WHERE names.first_name NOT IN (     SELECT name FROM Dogs )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 )
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN  (SELECT professional_id FROM Treatments  GROUP BY professional_id  HAVING COUNT(*) >= 2)
SELECT breed_name  FROM Breeds  WHERE breed_code = (     SELECT breed_code      FROM Dogs      GROUP BY breed_code      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT breed_name FROM Breeds WHERE breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT t.owner_id, o.last_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY t.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;
SELECT t.owner_id, o.last_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY t.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description  FROM Treatment_Types  WHERE treatment_type_code = (     SELECT treatment_type_code      FROM Treatments      GROUP BY treatment_type_code      ORDER BY SUM(cost_of_treatment) ASC      LIMIT 1 )
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY Treatment_Types.treatment_type_description  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1;
SELECT Dogs.owner_id, Owners.zip_code FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN (     SELECT owner_id, SUM(charge_amount) AS total_paid     FROM Dogs     JOIN Charges ON Dogs.size_code = Charges.charge_type     GROUP BY owner_id     ORDER BY total_paid DESC     LIMIT 1 ) AS max_paid ON Dogs.owner_id = max_paid.owner_id GROUP BY Dogs.owner_id, Owners.zip_code ORDER BY max_paid.total_paid DESC LIMIT 1;
SELECT d.owner_id, o.zip_code FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN (     SELECT dog_id, SUM(cost_of_treatment) AS total_cost     FROM Treatments     GROUP BY dog_id ) t ON d.dog_id = t.dog_id GROUP BY d.owner_id, o.zip_code ORDER BY SUM(t.total_cost) DESC LIMIT 1;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professionals.first_name, Professionals.last_name  FROM Professionals  INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT DISTINCT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = (SELECT Breeds.breed_name FROM Breeds ORDER BY COUNT(Dogs.breed_code) ASC LIMIT 1)
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = (SELECT Breeds.breed_name FROM Breeds ORDER BY COUNT(*) ASC LIMIT 1)
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_departed IS NOT NULL
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT last_name  FROM Owners  WHERE owner_id = (SELECT owner_id                    FROM Dogs                    WHERE age = (SELECT MIN(age)                                 FROM Dogs))
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges
SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges)
SELECT email_address, home_phone, cell_number FROM Professionals;
SELECT email_address, home_phone, cell_number FROM Professionals;
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds, Sizes
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship <> 'French'
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(DISTINCT Singer_ID) AS Num_Singers FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(DISTINCT Singer_ID)  FROM singer  GROUP BY Citizenship
SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT singer.Name  FROM singer  INNER JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Sales > 300000;
SELECT DISTINCT Name FROM singer  INNER JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE Sales > 300000
SELECT Name FROM singer  WHERE Singer_ID IN (SELECT Singer_ID FROM song  GROUP BY Singer_ID HAVING COUNT(*) > 1);
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 AND Birth_Year > 1955  AND Singer_ID IN (SELECT Singer_ID FROM song)
SELECT COUNT(*) FROM Other_Available_Features;
SELECT feature_type_name FROM Ref_Feature_Types  WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features  WHERE feature_name = 'AirCon');
SELECT Ref_Property_Types.property_type_description  FROM Properties  JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code  WHERE Properties.property_type_code = [code];
SELECT property_name  FROM Properties  WHERE (property_type_code = 'APT' OR property_type_code = 'HSE')  AND room_count > 1;
