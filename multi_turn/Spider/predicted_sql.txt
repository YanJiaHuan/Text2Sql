SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT singer.Name, singer.Country, singer.Age FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID ORDER BY singer.Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age) AS avg_age, MIN(Age) AS min_age, MAX(Age) AS max_age FROM singer WHERE Country = 'France'
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age  FROM singer  WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_release_year FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country
SELECT COUNT(*) AS num_singers, Country FROM singer GROUP BY Country
SELECT Song_Name FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer) 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT stadium.Name, stadium.Capacity FROM stadium  WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity  FROM stadium  WHERE stadium.Stadium_ID = (   SELECT concert.Stadium_ID    FROM concert    JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID    GROUP BY concert.Stadium_ID    ORDER BY AVG(singer_in_concert.Attendance) DESC    LIMIT 1 )
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, count(concert.concert_ID) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, stadium.Capacity  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year >= 2014  GROUP BY stadium.Name, stadium.Capacity  HAVING COUNT(concert.concert_ID) = (     SELECT MAX(concert_count)      FROM (         SELECT COUNT(concert.concert_ID) as concert_count          FROM concert          WHERE concert.Year >= 2014          GROUP BY concert.Stadium_ID     ) as counts )
SELECT stadium.Name, stadium.Capacity  FROM stadium  WHERE stadium.Stadium_ID = (     SELECT concert.Stadium_ID      FROM concert      JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID      WHERE concert.Year > 2013      GROUP BY concert.Stadium_ID      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Theme = 'concert')
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Theme = 'concert')
SELECT DISTINCT singer.Country FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE singer.Age > 40 AND singer.Country IN  (SELECT singer.Country FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE singer.Age < 30)
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Theme = 'concert' AND concert.Year = 2014)
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Theme = 'concert' AND concert.Year = 2014)
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Singer_ID, singer.Name
SELECT singer.Name FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name, singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Song_Name LIKE '%Hey%'
SELECT stadium.Name, stadium.Location  FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015)
SELECT stadium.Name, stadium.Location FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2015)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10
SELECT count(*) FROM singer;
SELECT count(*) FROM singer
SELECT singer.Name, singer.Country, singer.Age FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID ORDER BY singer.Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age  FROM singer  WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_release_year FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Age > 20;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country
SELECT COUNT(*) AS num_singers, Country FROM singer GROUP BY Country
SELECT Song_Name FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer) 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT stadium.Name, stadium.Capacity FROM stadium  WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium  WHERE stadium.Stadium_ID = (SELECT concert.Stadium_ID FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  GROUP BY concert.Stadium_ID  ORDER BY AVG(concert.Year) DESC  LIMIT 1)
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts  FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name
SELECT stadium.Name, stadium.Capacity  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year >= 2014  GROUP BY stadium.Name, stadium.Capacity  HAVING COUNT(concert.concert_ID) = (     SELECT MAX(concert_count)      FROM (         SELECT COUNT(concert.concert_ID) as concert_count          FROM concert          WHERE concert.Year >= 2014          GROUP BY concert.Stadium_ID     ) as counts )
SELECT stadium.Name, stadium.Capacity  FROM stadium  WHERE stadium.Stadium_ID = (     SELECT concert.Stadium_ID      FROM concert      JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID      WHERE concert.Year > 2013      GROUP BY concert.Stadium_ID      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Theme = 'concert')
SELECT DISTINCT singer.Country  FROM singer_in_concert  JOIN singer AS s1 ON singer_in_concert.Singer_ID = s1.Singer_ID  JOIN singer AS s2 ON singer_in_concert.Singer_ID = s2.Singer_ID  WHERE s1.Age > 40 AND s2.Age < 30  GROUP BY singer.Country;
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Theme = 'concert' AND concert.Year = 2014)
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Theme = 'concert' AND concert.Year = 2014)
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Singer_ID, singer.Name
SELECT singer.Name FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name, singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE singer.Song_Name LIKE '%Hey%'
SELECT stadium.Name, stadium.Location  FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015)
SELECT stadium.Name, stadium.Location FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID FROM concert  INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2015)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10
SELECT count(*) FROM pets WHERE weight > 10;
SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE pettype = 'dog')
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT COUNT(*) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20
SELECT COUNT(*) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20
SELECT count(*) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Sex = 'F' AND Pets.PetType = 'dog'
SELECT COUNT(*) FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID;
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
SELECT DISTINCT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
SELECT T1.Fname FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T3.PetType = 'cat' AND T1.StuID IN  (SELECT T1.StuID FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T3.PetType = 'dog')
SELECT DISTINCT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Student.StuID IN  (SELECT Student.StuID FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog')
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN  (SELECT Student.StuID FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat')
SELECT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN  (SELECT Student.StuID FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat')
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT AVG(pets.pet_age) AS avg_age, MAX(pets.pet_age) AS max_age, pets.pettype  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  GROUP BY pets.pettype
SELECT AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age, PetType FROM Pets GROUP BY PetType;
SELECT AVG(weight), PetType FROM Pets GROUP BY PetType
SELECT avg(weight), pettype FROM pets GROUP BY pettype
SELECT Student.Fname, Student.Age FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT DISTINCT Student.Fname, Student.Age FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IS NOT NULL
SELECT Has_Pet.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT COUNT(*) AS num_pets, Has_Pet.StuID AS student_id  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  GROUP BY Has_Pet.StuID  HAVING COUNT(*) > 0
SELECT COUNT(Has_Pet.PetID) AS num_pets, Has_Pet.StuID FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Has_Pet.StuID IN (SELECT StuID FROM Has_Pet)  GROUP BY Has_Pet.StuID
SELECT Student.Fname, Student.Sex  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
SELECT Student.Fname, Student.Sex FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3  ORDER BY Has_Pet.Date_Added DESC  LIMIT 1
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3  ORDER BY Has_Pet.Date_Added DESC  LIMIT 1
SELECT AVG(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT AVG(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT count(*) FROM continents
SELECT count(*) FROM continents
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY continents.ContId, continents.Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY continents.ContId, continents.Continent
SELECT count(*) FROM countries
SELECT count(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS Number_of_Models  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.FullName
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT DISTINCT car_makers.FullName  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970
SELECT DISTINCT car_makers.Maker FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970
SELECT car_names.Make, MIN(cars_data.Year) AS EarliestYear, car_makers.FullName AS Maker FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_names.Make, car_makers.FullName HAVING MIN(cars_data.Year) = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.Make = cars_data.Make  GROUP BY car_makers.Maker  ORDER BY EarliestYear ASC  LIMIT 1;
SELECT DISTINCT car_names.Model FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Year > 1980
SELECT DISTINCT cars_data.Year, model_list.Model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY continents.Continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS NumMakers FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(DISTINCT car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN (SELECT car_makers.Country, COUNT(DISTINCT car_makers.Maker) AS num_makers FROM car_makers GROUP BY car_makers.Country ORDER BY num_makers DESC LIMIT 1) AS max_makers ON countries.CountryId = max_makers.Country
SELECT COUNT(model_list.ModelId), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_car_models  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.FullName
SELECT Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_names.Make = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'amc hornet sportabout (sw)'
SELECT count(*) FROM car_makers WHERE Country = 'france'
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT count(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT COUNT(DISTINCT model_list.Model) FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data  WHERE Cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id
SELECT DISTINCT countries.CountryName, car_makers.Id FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId
SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT AVG(Weight) FROM cars_data GROUP BY Year
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN continents ON countries.Continent = continents.ContId  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3  AND continents.Continent = 'Europe';
SELECT DISTINCT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE countries.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower), car_makers.Maker FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3;
SELECT MAX(cars_data.Horsepower), car_makers.Maker FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3  GROUP BY car_makers.Maker
SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  JOIN continents ON countries.Continent = continents.ContId  WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year < 1980
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'Volvo'
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT car_makers.Maker, model_list.Model, COUNT(cars_data.Id) AS num_cars FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker, model_list.Model ORDER BY num_cars DESC LIMIT 1;
SELECT model_list.Model, COUNT(DISTINCT cars_data.Id) AS num_versions  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY model_list.Model  ORDER BY num_versions DESC  LIMIT 1;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(DISTINCT car_names.Model)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'American Motor Company'
SELECT car_makers.FullName, car_makers.Id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  GROUP BY car_makers.FullName, car_makers.Id  HAVING COUNT(DISTINCT car_names.Model) > 3;
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT car_names.Model) > 3;
SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON cars_data.Id = (SELECT MakeId FROM car_names WHERE car_names.Model = model_list.Model) WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON cars_data.Id = car_names.MakeId JOIN car_names ON car_names.Model = model_list.Model WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT cars_data.Year FROM cars_data  WHERE cars_data.Weight < 4000 AND cars_data.Year IN  (SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000)
SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT MIN(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo'))
SELECT MIN(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE FullName = 'Volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE FullName = 'Volvo'))
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))
SELECT COUNT(DISTINCT countries.CountryName)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN (     SELECT MakeId, COUNT(DISTINCT Maker) AS num_makers      FROM car_makers      GROUP BY MakeId      HAVING num_makers > 2 ) AS maker_count ON car_names.MakeId = maker_count.MakeId;
SELECT COUNT(DISTINCT countries.CountryName)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  JOIN model_list ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  JOIN (SELECT MakeId, COUNT(DISTINCT Model) AS num_models        FROM car_names        GROUP BY MakeId        HAVING num_models > 2) AS subquery ON subquery.MakeId = car_names.MakeId;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT car_names.Model, cars_data.Horsepower  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Cylinders = 4  ORDER BY cars_data.Horsepower DESC  LIMIT 1
SELECT car_names.Model, MAX(cars_data.Horsepower)  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Cylinders = 4  GROUP BY car_names.Model  ORDER BY MAX(cars_data.Horsepower) DESC  LIMIT 1
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN car_makers ON car_makers.Id = car_names.Make  WHERE cars_data.Cylinders < 4  AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(MPG) FROM cars_data  WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE (Cylinders = 8 OR Year < 1980)
SELECT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'
SELECT DISTINCT model_list.Model FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'
SELECT DISTINCT countries.CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Id IS NULL;
SELECT DISTINCT countries.CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Id IS NULL
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(DISTINCT car_names.Make) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers  WHERE car_makers.Id IN (SELECT model_list.Maker FROM model_list                          JOIN car_names ON model_list.Model = car_names.Model                          GROUP BY model_list.Maker                          HAVING COUNT(DISTINCT car_names.MakeId) >= 2)  AND car_makers.Id IN (SELECT car_names.Make FROM car_names                        JOIN cars_data ON car_names.MakeId = cars_data.Id                        GROUP BY car_names.Make                        HAVING COUNT(*) > 3)
SELECT countries.CountryId, countries.CountryName FROM countries  WHERE (SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3  OR countries.CountryId IN (SELECT DISTINCT countries.CountryId FROM countries  JOIN car_makers ON car_makers.Country = countries.CountryId  JOIN model_list ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.Model = model_list.Model  WHERE car_names.Make = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries  WHERE countries.CountryId IN (SELECT car_makers.Country FROM car_makers  GROUP BY car_makers.Country  HAVING COUNT(DISTINCT car_makers.Maker) > 3)  OR countries.CountryId IN (SELECT DISTINCT countries.CountryId FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  WHERE car_names.Make = 'fiat')
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT airlines.Country FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony'
SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Anthony' UNION SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Anthony'
SELECT count(*) FROM airlines
SELECT count(*) FROM airlines
SELECT count(*) FROM airports
SELECT count(*) FROM airports
SELECT count(*) FROM flights
SELECT count(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT count(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = 'Alton' UNION SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = 'Alton'
SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = 'Alton' AND flights.Airline = 'flight_2'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT airports.AirportName FROM airports WHERE airports.City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT count(*) FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')  AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT airports.City, COUNT(flights.FlightNo) AS NumArrivingFlights  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY NumArrivingFlights DESC  LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City, COUNT(*) AS num_departing_flights  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY num_departing_flights DESC  LIMIT 1
SELECT airports.City, COUNT(*) AS freq FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY freq DESC LIMIT 1
SELECT flights.SourceAirport FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY flights.SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1
SELECT Airline, COUNT(*) AS num_flights  FROM flights  GROUP BY Airline  ORDER BY num_flights DESC  LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE Airline = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Airline = flights.Airline  WHERE flights.SourceAirport = 'AHD'
SELECT DISTINCT airlines.Airline  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airports.AirportCode = 'AHD'
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT DISTINCT airlines.Airline  FROM flights  JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode  JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE A1.AirportCode = 'APG' AND A2.AirportCode = 'CVO'
SELECT DISTINCT airlines.Airline FROM airlines  INNER JOIN flights ON airlines.Airline = flights.Airline  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode IN ('APG', 'CVO')  GROUP BY airlines.Airline  HAVING COUNT(DISTINCT airports.AirportCode) = 2
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Airline = flights.Airline  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN (SELECT DISTINCT airlines.Airline                               FROM airlines                               JOIN flights ON airlines.Airline = flights.Airline                               WHERE flights.SourceAirport = 'APG')
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN  (SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'APG')
SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)
SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL
SELECT count(*) FROM employee
SELECT count(*) FROM employee
SELECT employee.Name, employee.Age  FROM employee_hire_evaluation.employee  ORDER BY employee.Age ASC;
SELECT employee.Name, employee.Age  FROM employee_hire_evaluation.employee  ORDER BY employee.Age ASC;
SELECT COUNT(*) AS num_employees, City FROM employee GROUP BY City
SELECT City, COUNT(*) FROM employee GROUP BY City
SELECT City FROM employee  WHERE Age < 30  AND Employee_ID IN (SELECT Employee_ID FROM hiring                      GROUP BY Employee_ID                      HAVING COUNT(*) > 1)  GROUP BY City  HAVING COUNT(*) > 1;
SELECT City FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(Employee_ID) > 1
SELECT shop.Location, count(*) as num_shops FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Location
SELECT COUNT(*) AS num_shops, shop.Location FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Location
SELECT shop.Manager_name, shop.District  FROM shop  WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District  FROM shop  WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID
SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(shop.Number_products) FROM shop)
SELECT employee.Name FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT employee.Name FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT employee.Name FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name  FROM employee_hire_evaluation AS ehe  JOIN employee AS e ON ehe.Employee_ID = e.Employee_ID  WHERE ehe.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT shop.Name, count(hiring.Employee_ID) as num_employees_hired  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name
SELECT shop.Name, count(hiring.Employee_ID) as num_employees  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT DISTINCT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN (SELECT shop.District FROM shop WHERE shop.Number_products > 10000)
SELECT DISTINCT shop.District FROM shop  WHERE shop.Number_products < 3000 AND shop.District IN  (SELECT shop.District FROM shop WHERE shop.Number_products > 10000)
SELECT count(DISTINCT shop.Location) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID
SELECT COUNT(DISTINCT shop.Location)  FROM hiring  JOIN shop ON hiring.Shop_ID = shop.Shop_ID  WHERE hiring.Employee_ID IN (SELECT Employee_ID FROM evaluation)  AND hiring.Employee_ID IN (SELECT Employee_ID FROM employee)
SELECT count(*) FROM Documents
SELECT count(*) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Templates.Template_ID) AS num_templates  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID
SELECT COUNT(*) FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS num_documents  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, count(Documents.Document_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates  WHERE Templates.Template_ID = (SELECT Documents.Template_ID FROM Documents                                  GROUP BY Documents.Template_ID                                  ORDER BY COUNT(*) DESC                                  LIMIT 1)
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID, Templates.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1;
SELECT Templates.Template_ID FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID  FROM cre_Doc_Template_Mgt.Templates  WHERE Templates.Template_ID IN (     SELECT Documents.Template_ID      FROM cre_Doc_Template_Mgt.Documents      GROUP BY Documents.Template_ID      HAVING COUNT(DISTINCT Documents.Document_ID) > 1 )
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)
SELECT count(*) FROM Templates
SELECT count(*) FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Templates.Template_Type_Code  FROM Templates  JOIN Ref_Template_Types  ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  ORDER BY Templates.Template_Type_Code ASC;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT')
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS num_templates FROM Templates GROUP BY Template_Type_Code ORDER BY num_templates DESC LIMIT 1;
SELECT Templates.Template_Type_Code  FROM Templates  GROUP BY Templates.Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types  WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates  GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3)
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3)
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY Templates.Version_Number ASC LIMIT 1;
SELECT Templates.Template_Type_Code, MIN(Templates.Version_Number) AS Lowest_Version_Number  FROM Templates  GROUP BY Templates.Template_Type_Code
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Data base'
SELECT Templates.Template_Type_Code  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Document_Name = 'Data base'
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  JOIN Documents ON Documents.Template_ID = Templates.Template_ID  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID)  FROM Templates  JOIN Documents ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_Type_Code, COUNT(*) AS num_docs FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY num_docs DESC LIMIT 1;
SELECT Templates.Template_Type_Code  FROM Templates  GROUP BY Templates.Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  WHERE Templates.Template_ID IS NULL
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  WHERE Templates.Template_ID IS NULL
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Ref_Template_Types.Template_Type_Description
SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IN (SELECT Paragraphs.Document_ID FROM Paragraphs)
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs
SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID ASC
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID ASC
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT DISTINCT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT Document_ID FROM Documents  WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2)
SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name  ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC  LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name  FROM Documents  JOIN (SELECT Document_ID, COUNT(*) AS num_paragraphs        FROM Paragraphs        GROUP BY Document_ID        ORDER BY num_paragraphs DESC        LIMIT 1) AS max_paragraphs  ON Documents.Document_ID = max_paragraphs.Document_ID
SELECT Document_ID FROM Documents  WHERE Document_ID = (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1)
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC  LIMIT 1;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE LENGTH(Paragraphs.Paragraph_Text) BETWEEN 1 AND 2;
SELECT DISTINCT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'
SELECT DISTINCT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'
SELECT count(*) FROM teacher
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Age ASC
SELECT teacher.Age, teacher.Hometown FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID
SELECT teacher.Age, teacher.Hometown FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32,33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32,33)
SELECT teacher.Hometown FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE teacher.Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  WHERE teacher.Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(*) FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(*) FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(*) AS count FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  GROUP BY teacher.Hometown  ORDER BY count DESC  LIMIT 1;
SELECT teacher.Hometown, COUNT(*) AS count FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Hometown ORDER BY count DESC LIMIT 1
SELECT DISTINCT t1.hometown  FROM teacher t1  JOIN teacher t2 ON t1.hometown = t2.hometown AND t1.teacher_id <> t2.teacher_id  JOIN course_arrange ca ON t1.teacher_id = ca.teacher_id  JOIN course_arrange ca2 ON t2.teacher_id = ca2.teacher_id AND ca.course_id = ca2.course_id  GROUP BY t1.hometown  HAVING COUNT(DISTINCT t1.teacher_id) >= 2;
SELECT teacher.Hometown FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Hometown  HAVING COUNT(DISTINCT course_arrange.Teacher_ID) >= 2
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  ORDER BY teacher.Name ASC;
SELECT teacher.Name FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
SELECT teacher.Name FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name
SELECT teacher.Name, COUNT(course_arrange.Course_ID)  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name
SELECT teacher.Name FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher  WHERE teacher.Teacher_ID IN  (SELECT course_arrange.Teacher_ID FROM course_arrange  GROUP BY course_arrange.Teacher_ID  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2)
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)
SELECT count(*) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT AVG(visitor.Age) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visit.visitor_ID = visitor.ID  GROUP BY visit.visitor_ID  HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership  FROM visitor  JOIN visit ON visit.visitor_ID = visitor.ID  GROUP BY visitor.ID  ORDER BY SUM(visit.Total_spent) DESC  LIMIT 1
SELECT museum.Museum_ID, museum.Name  FROM visit  JOIN museum ON visit.Museum_ID = museum.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.visitor_ID IS NULL
SELECT visitor.Name, visitor.Age FROM visitor  JOIN visit ON visit.visitor_ID = visitor.ID  WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1
SELECT DISTINCT visitor.Name FROM visitor  JOIN visit AS v1 ON visitor.ID = v1.visitor_ID  JOIN museum AS m1 ON v1.Museum_ID = m1.Museum_ID  JOIN visit AS v2 ON visitor.ID = v2.visitor_ID  JOIN museum AS m2 ON v2.Museum_ID = m2.Museum_ID  WHERE m1.Open_Year < 2009 AND m2.Open_Year > 2011
SELECT count(DISTINCT visitor.ID) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT count(*) FROM players
SELECT count(*) FROM players
SELECT count(*) FROM matches
SELECT count(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE players.country_code = 'USA'
SELECT AVG(loser_age) FROM matches WHERE loser_rank IS NOT NULL UNION SELECT AVG(winner_age) FROM matches WHERE winner_rank IS NOT NULL
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches WHERE winner_rank IS NOT NULL
SELECT AVG(winner_rank) FROM matches WHERE winner_rank IS NOT NULL
SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL
SELECT MAX(loser_rank) FROM matches WHERE loser_rank IS NOT NULL
SELECT COUNT(DISTINCT players.country_code) FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches WHERE winner_rank < loser_rank
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)
SELECT DISTINCT players.first_name, players.last_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.year = 2013 AND matches.winner_id IN  (SELECT winner_id FROM matches WHERE year = 2016)
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  WHERE matches.tourney_name = 'WTA Championships'  AND rankings.tours = 'Australian Open'
SELECT players.first_name, players.country_code  FROM players  JOIN matches AS m1 ON players.player_id = m1.winner_id  JOIN matches AS m2 ON players.player_id = m2.winner_id  WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id ORDER BY players.birth_date ASC LIMIT 1
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.loser_age DESC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name FROM players ORDER BY players.birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name  FROM players  JOIN matches ON matches.loser_id = players.player_id  WHERE players.hand = 'L'  ORDER BY players.birth_date ASC;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT year, COUNT(*) AS num_matches  FROM matches  GROUP BY year  ORDER BY num_matches DESC  LIMIT 1;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1
SELECT winner_name, MAX(counts) as max_wins, winner_rank_points  FROM (     SELECT winner_name, COUNT(*) as counts, winner_rank_points      FROM matches      WHERE winner_name IS NOT NULL      GROUP BY winner_name ) as win_counts  GROUP BY winner_rank_points  ORDER BY max_wins DESC  LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT winner_name FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE tourney_name = 'Australian Open'  AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT AVG(rankings.ranking) AS avg_ranking, players.first_name  FROM rankings  JOIN players ON rankings.player_id = players.player_id  GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.country_code, COUNT(*) AS num_players FROM players GROUP BY players.country_code
SELECT players.country_code, COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.country_code
SELECT players.country_code AS country, COUNT(matches.winner_id) + COUNT(matches.loser_id) AS num_players FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id GROUP BY players.country_code ORDER BY num_players DESC LIMIT 1;
SELECT players.country_code AS code, COUNT(matches.winner_id) + COUNT(matches.loser_id) AS num_players FROM players LEFT JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.country_code ORDER BY num_players DESC LIMIT 1;
SELECT players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.country_code HAVING COUNT(DISTINCT players.player_id) > 50
SELECT players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.country_code HAVING COUNT(DISTINCT players.player_id) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, COUNT(DISTINCT tourney_id) AS total_tours  FROM rankings  GROUP BY ranking_date;
SELECT year, count(*) FROM matches GROUP BY year
SELECT year, count(*) FROM matches GROUP BY year
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches  WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date  FROM players  JOIN matches ON matches.winner_id = players.player_id  WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT players.first_name, players.country_code, players.birth_date  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT players.hand, COUNT(*) AS num_players FROM players GROUP BY players.hand
SELECT players.hand, count(*) FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id GROUP BY players.hand
SELECT count(*) FROM ship JOIN death ON ship.id = death.caused_by_ship_id WHERE ship.lost_in_battle IN (SELECT id FROM battle WHERE result = 'Captured')
SELECT ship.name, ship.tonnage  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  JOIN battle ON ship.lost_in_battle = battle.id  ORDER BY ship.name DESC, ship.tonnage DESC
SELECT name, date, result FROM battle
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE lost_in_battle IN (SELECT id FROM battle))
SELECT COUNT(*) FROM singer
SELECT death.note, death.killed, death.injured FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT DISTINCT battle.id, battle.name FROM battle  WHERE battle.id IN  (SELECT ship.lost_in_battle FROM ship WHERE ship.ship_type = 'Brig')  AND battle.id NOT IN  (SELECT ship.lost_in_battle FROM ship WHERE ship.ship_type != 'Brig')
SELECT battle.id, battle.name FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.id, battle.name  HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1
SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle  WHERE id NOT IN  (SELECT DISTINCT lost_in_battle FROM ship WHERE tonnage = '225' AND lost_in_battle IS NOT NULL)
SELECT battle.name, battle.date  FROM battle  JOIN death AS d1 ON d1.caused_by_ship_id = (SELECT id FROM ship WHERE name = 'Lettice' AND lost_in_battle = battle.id)  JOIN death AS d2 ON d2.caused_by_ship_id = (SELECT id FROM ship WHERE name = 'HMS Atalanta' AND lost_in_battle = battle.id)  WHERE d1.killed > 0 AND d2.killed > 0;
SELECT battle.name, battle.result, battle.bulgarian_commander  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.id IS NULL AND ship.location = 'English Channel'
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses;
SELECT count(*) FROM Courses
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT Addresses.zip_postcode FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Addresses.city = 'Port Chelsea'
SELECT Addresses.zip_postcode FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id WHERE Students.first_name = 'Port' AND Students.last_name = 'Chelsea'
SELECT Departments.department_name, Departments.department_id  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  GROUP BY Departments.department_name, Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1;
SELECT Departments.department_name, Departments.department_id  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  GROUP BY Departments.department_name, Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1;
SELECT count(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name IS NOT NULL;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT Courses.course_id, Courses.course_name FROM Courses  WHERE Courses.course_id IN (SELECT Sections.course_id FROM Sections  GROUP BY Sections.course_id HAVING COUNT(*) <= 2)
SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2)
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id, COUNT(Student_Enrolment.student_id) AS num_students  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_name, Semesters.semester_id  ORDER BY num_students DESC  LIMIT 1;
SELECT Semesters.semester_name, Students.student_id, COUNT(*) AS num_students FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Semesters.semester_name, Students.student_id HAVING COUNT(*) = (   SELECT MAX(num_students)   FROM (     SELECT Semesters.semester_name, Students.student_id, COUNT(*) AS num_students     FROM Student_Enrolment     JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id     JOIN Students ON Student_Enrolment.student_id = Students.student_id     GROUP BY Semesters.semester_name, Students.student_id   ) AS temp   WHERE temp.semester_name = Semesters.semester_name )
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'
SELECT Departments.department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2  AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2  AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Courses.course_name, COUNT(Student_Enrolment.student_id) AS num_students  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id  JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id  JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id  GROUP BY Courses.course_name  ORDER BY num_students DESC  LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_summary_name  ORDER BY num_students DESC  LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_program_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1;
SELECT Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name  FROM Student_Enrolment  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  GROUP BY Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  ORDER BY num_enrollments DESC  LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1;
SELECT Students.last_name FROM Students  WHERE Students.current_address_id IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = 'North Carolina')  AND Students.student_id NOT IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment)
SELECT Students.last_name FROM Students  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  LEFT JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND Student_Enrolment.degree_program_id IS NULL
SELECT Transcripts.transcript_date, Transcript_Contents.transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  GROUP BY Transcript_Contents.transcript_id  HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2
SELECT Transcripts.transcript_date, Transcripts.transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  GROUP BY Transcripts.transcript_id  HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2;
SELECT Students.cell_mobile_number FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward'
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id  ORDER BY Student_Enrolment.date_first_registered  LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id  JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id  JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id  ORDER BY Transcripts.transcript_date ASC LIMIT 1;
SELECT Students.first_name FROM Students  JOIN Addresses AS current ON Students.current_address_id = current.address_id  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  WHERE current.line_1 <> permanent.line_1 OR current.line_2 <> permanent.line_2 OR current.line_3 <> permanent.line_3 OR current.city <> permanent.city OR current.zip_postcode <> permanent.zip_postcode OR current.state_province_county <> permanent.state_province_county OR current.country <> permanent.country OR current.other_address_details <> permanent.other_address_details
SELECT Students.first_name FROM Students JOIN Addresses AS Perm ON Students.permanent_address_id = Perm.address_id JOIN Addresses AS Curr ON Students.current_address_id = Curr.address_id WHERE Perm.line_1 <> Curr.line_1 LIMIT 1;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3  FROM Addresses  JOIN Students ON Addresses.address_id = Students.current_address_id  GROUP BY Addresses.address_id  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT MIN(transcript_date), * FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT COUNT(student_course_id) AS max_enrollment, student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(student_course_id) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(student_course_id) AS enrollment_count FROM Transcript_Contents GROUP BY student_course_id) AS enrollment_counts)
SELECT COUNT(course_id) AS max_course_count, course_id FROM  (SELECT course_id, COUNT(DISTINCT student_enrolment_id) AS course_count  FROM student_enrolment_courses  GROUP BY course_id) AS course_counts  ORDER BY course_count DESC  LIMIT 1;
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT Semesters.semester_name FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Master'  AND Semesters.semester_id IN (SELECT Semesters.semester_id FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor')
SELECT semester_id FROM Student_Enrolment  WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors') )  GROUP BY semester_id  HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT count(DISTINCT Students.current_address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id
SELECT DISTINCT Addresses.* FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id
SELECT * FROM Students ORDER BY last_name DESC
SELECT * FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582' LIMIT 1;
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582' LIMIT 10;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  JOIN TV_series ON Cartoon.Channel = TV_series.Channel  ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel WHERE Cartoon.Original_air_date IS NOT NULL ORDER BY TV_series.Air_Date ASC
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'
